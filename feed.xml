<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://code-y-learner.github.io//jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://code-y-learner.github.io//jekyll-theme-yat/" rel="alternate" type="text/html" hreflang="ko" /><updated>2022-10-07T15:45:46+00:00</updated><id>https://code-y-learner.github.io//jekyll-theme-yat/feed.xml</id><title type="html">Code-Y’s Blog</title><subtitle>Personal blog that posts IT informations and hobbies</subtitle><author><name>Code-Y-Learner</name></author><entry><title type="html">Git(2)</title><link href="https://code-y-learner.github.io//jekyll-theme-yat/git/2022/10/07/Git(2).html" rel="alternate" type="text/html" title="Git(2)" /><published>2022-10-07T00:00:00+00:00</published><updated>2022-10-07T00:00:00+00:00</updated><id>https://code-y-learner.github.io//jekyll-theme-yat/git/2022/10/07/Git(2)</id><content type="html" xml:base="https://code-y-learner.github.io//jekyll-theme-yat/git/2022/10/07/Git(2).html"><![CDATA[<h2 id="git-설치이후">Git 설치이후</h2>
<p>먼저 이메일과 닉네임을 설정해준다.(이후 누가 버전을 수정하면 누가 한지 알 수 있다.)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global user.name "자신의 닉네임"
$ git config --global user.email "자신의 이메일"
</code></pre></div></div>

<p>git을 사용하고자 하는 프로젝트 폴더로 이동한다. 예를들자면</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /D/IT/Project
</code></pre></div></div>

<p>자신이 버전에 추가시킬 파일들을 add,commit 해보자
미리 test.txt 파일을 생성 후</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add test.txt          # text.txt파일만을 git에 포함할때
$ git add .                 # 폴더 내 모든 파일을 포함할때
$ git commit -m "commit-message"  # add한 파일들로 commit  
</code></pre></div></div>
<p>이때 -m “commit-message” 어떤 것을 commit했는지에 대한 정보가 담겨 있다.
예를 들어 처음에는 -m “initial commit” 이라고 하면 앞으로 버전관리를 위해 파일들을 묶어놨다라고 보면 된다.</p>

<p>commit이 완료되면 이제 버전을 관리할 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git log # 버전에 대한 정보 확인
</code></pre></div></div>
<p>그렇다면 이제 당신이 test.txt파일을 내용을 수정하면</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
</code></pre></div></div>
<p>를 입력하면 test.txt 파일이 modified 수정 되었음을 의미하고</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commmit -m "change test.txt"
</code></pre></div></div>
<p>이렇게 commit할 수 있다.</p>

<p>이런 일련의 과정을 거치면 나중에 commit message를 보면서 버전을 초기버전으로 test.txt가 처음 버전으로 되돌리기나
수정된 시점으로 갈 수 있다 그렇기 때문에 commit message는 다른 사람이 봐도 한눈에 이해하기 쉽게 작성하는 것이 중요하다</p>

<p>일단은 이 정도만 알아두고 더 중요한 것은 습관화하는 것이다. git add commit을 통해 자신이 작성해둔 파일을 버전으로 관리하면 처음에는 불편할 수 있다.
하지만 프로젝트가 커지고 다른사람과 협업을 하거나 할때 일의 흐름을 미리미리 기록해두기 때문에 매우 중요한 습관이다.</p>

<p>다음에는 commit했던 특정 시점으로 되돌아가거나 과거의 버전으로 되돌아가거나 add를 취소하는 법을 알아보자</p>]]></content><author><name>Code-Y-Learner</name></author><category term="git" /><category term="git" /><summary type="html"><![CDATA[Git 설치이후 먼저 이메일과 닉네임을 설정해준다.(이후 누가 버전을 수정하면 누가 한지 알 수 있다.) $ git config --global user.name "자신의 닉네임" $ git config --global user.email "자신의 이메일"]]></summary></entry><entry><title type="html">Git(1)</title><link href="https://code-y-learner.github.io//jekyll-theme-yat/git/2022/10/07/git(1).html" rel="alternate" type="text/html" title="Git(1)" /><published>2022-10-07T00:00:00+00:00</published><updated>2022-10-07T00:00:00+00:00</updated><id>https://code-y-learner.github.io//jekyll-theme-yat/git/2022/10/07/git(1)</id><content type="html" xml:base="https://code-y-learner.github.io//jekyll-theme-yat/git/2022/10/07/git(1).html"><![CDATA[<p><img src="/assets/images/2022-10-07-git(1)/git_important.jpg" alt="git_image" width="380" height="380" class="center-block" /></p>
<h3 id="git이란-왜-배워야하는가">Git이란? 왜 배워야하는가</h3>
<p>git이란 분산버전관리시스템으로 변경사항을 추적하고 해당파일에 조율을 여러명의 사용자들간에 가능하게 해준다.</p>

<p>분산버전같은 어려운 얘기나 깃의 역사나 이런 구구절절한 사연을 다 제쳐두더라도 깃을 빠르게 배워야 하는 이유는 존재한다.</p>

<p>누군가가 깃을 배우기 가장 중요한 때가 언제냐고 물어보면 코딩을 배우기 전 혹은 코딩을 배우기 전날이라는 대답을 들을수가 있다.</p>

<p>바꿔말하면 코딩을 이미 배웠더라도 깃을 배우기 가장 중요한 순간은 바로 오늘 지금이라는 뜻이다.</p>

<p>깃을 가장 맨처음 블로그에 작성하는 이유도 위와 같다.</p>

<h3 id="git-사용사례">Git 사용사례</h3>
<p>왜 깃을 배워야하는지 빠르게 사용사례를 통해 알아보자 깃은 코딩을 하는 프로그래머 뿐만 아니라 작곡가 작가들이 많이 애용하고 있다.
특히 작가들을 예를 들면 깃이 얼마나 중요한지 왜 빠르게 배워야하는지 쉽게 이해할 수가 있다.</p>

<p>여러분이 소설을 쓸때 머릿말을 작성하고 본편을 적고 있는데 본편에서 스토리 진행에 따라 머릿말에 본편과 이어지면서도 기가막힌 아이디어가 떠올랐다고 치자 이를 통해 머릿말을 수정하였다 불행히도 
나중에 출판사에서 컨펌을 통해 본편을 수정하면서 스토리라인이 바뀌면서 어려분들은 머릿말을 수정하기 전으로 돌리고 싶지만 기억이 나질 않는다.</p>

<p>만약 깃을 사용했다면 쉽게 머릿말을 맨 처음 버전으로 돌이킬 수 있다. 뿐만 아니라 그때 수정했던 이유라든지 무엇을 수정했는지 쉽게 볼 수 있다.
즉 진행과정을 버전으로 분류하고 이를 관리하는 것이다.</p>

<p>더 놀라운 점은 출판사의 컨펌을 받기 전 처음에 생각했던 스토리와 이에 따른 머릿말 수정버전과 이후에 컨펌 후 스토리 수정하면서 머릿말을 다시 처음으로 되돌린 버전을 따로따로 기억하고 있기 때문에 이를 뻗어나가는 가지처럼 여러버젼의 글을 가지고 마지막에 사용자들에 따라 다른 버전의 글을 제시할 수 있다는 점이다.</p>

<p><img src="https://media.giphy.com/media/LZW4XQM1Cg2tO/giphy.gif" alt="writer_image" /></p>]]></content><author><name>Code-Y-Learner</name></author><category term="git" /><category term="git" /><summary type="html"><![CDATA[Git이란? 왜 배워야하는가 git이란 분산버전관리시스템으로 변경사항을 추적하고 해당파일에 조율을 여러명의 사용자들간에 가능하게 해준다.]]></summary></entry><entry><title type="html">github블로그를 만들어보자!</title><link href="https://code-y-learner.github.io//jekyll-theme-yat/jekyll/2022/10/06/github%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90.html" rel="alternate" type="text/html" title="github블로그를 만들어보자!" /><published>2022-10-06T00:00:00+00:00</published><updated>2022-10-06T00:00:00+00:00</updated><id>https://code-y-learner.github.io//jekyll-theme-yat/jekyll/2022/10/06/github%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC%20%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90</id><content type="html" xml:base="https://code-y-learner.github.io//jekyll-theme-yat/jekyll/2022/10/06/github%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90.html"><![CDATA[<h3 id="깃허브-블로그의-장점과-단점">깃허브 블로그의 장점과 단점</h3>

<p>이번에는 왜 깃허브 블로그를 시작했는지 깃허브의 장점과 단점을 보면서 알아보자</p>

<h3 id="장점">장점</h3>

<ol>
  <li>
    <p>자신의 입맛에 따라 구현할 수 있다.
네이버나 기타 티스토리등 다른 블로그들보다 원하는 기능을 넣거나 뺄 수 있다</p>
  </li>
  <li>
    <p>배포가 쉬운편
앞서 직접 서버를 구현한 것을 다른 서비스를 통하여 배포하는 것보다는 매우 쉽게 배포가 가능하다</p>
  </li>
  <li>
    <p>수익창출이 가능
직접 구글애드센스에 등록이 가능합니다.</p>
  </li>
</ol>

<h3 id="단점">단점</h3>
<ol>
  <li>
    <p>static 사이트만 깃허브페이지에서 가능하다
Flask나 Django처럼 데이터베이스나 안에서 파이썬 파일이 api서버에서 데이터를 가져와 뿌려주는 이러한 동작은 보통 불가능하다</p>
  </li>
  <li>
    <p>배포치고 쉬운편이지 다른 블로그 서비스보다 훨씬 어렵다
당연한 부분으로 마크다운에 대한 이해도 조금 필요하고 필요한 부분을 구현하는데 지식이 좀 필요하다 jekyll로 구현한 이 블로그에서는 jekyll의 활용법을 좀 알아야한다.</p>
  </li>
</ol>

<h3 id="결론">결론</h3>
<p>이러한 여러가지 면을 따져봤을때 깃허브 블로그는 자신의 IT에 대한 배운 내용을 정리하고 static사이트를 만드는 것도 배우는 일석이조라고 생각해서 시작했다.</p>]]></content><author><name>Jeffrey</name></author><category term="jekyll" /><category term="jekyll" /><category term="blog" /><category term="github" /><summary type="html"><![CDATA[깃허브 블로그의 장점과 단점]]></summary></entry><entry><title type="html">블로그개시</title><link href="https://code-y-learner.github.io//jekyll-theme-yat/blog/2022/10/05/firstpost.html" rel="alternate" type="text/html" title="블로그개시" /><published>2022-10-05T00:00:00+00:00</published><updated>2022-10-05T00:00:00+00:00</updated><id>https://code-y-learner.github.io//jekyll-theme-yat/blog/2022/10/05/firstpost</id><content type="html" xml:base="https://code-y-learner.github.io//jekyll-theme-yat/blog/2022/10/05/firstpost.html"><![CDATA[<h3 id="블로그-개시">블로그 개시</h3>
<p><img src="https://media.giphy.com/media/bnhAsd06orx3EkUJ8J/giphy.gif" alt="birthday_image" /></p>

<p>이 블로그는 Code-Y-Learner의 It 일상다반사를 기록하는 공간입니다.</p>

<p>일전에 Django를 통해 만든 웹사이트를 집에서 잠깐 배포 해본적이 있었는데 서버를 항상 유지할 수 없기 때문에 이번에는 flask로 RESTFUL-api 블로그를 설계하여 배포한 뒤 나의 IT 일상들을 기록하려고 하였다.</p>

<p>문제는 직접 배포를 할 수 없으니 배포를 대신 해주는 유무료 서비스들을 이용해야 하는데 이때 고른 해결책이 heroku였다</p>

<p>그렇다면 왜 이 블로그는 헤로쿠가 아니고 github블로그인가 이것에 대해 먼저 얘기해보고자 한다.</p>

<p><img src="/assets/images/2022-10-05-firstpost/heroku_blog.PNG" alt="blog_image" title="blog_image_file" /></p>

<p>나의 헤로쿠사이트는 <a href="https://codeylearnerblog.herokuapp.com">https://codeylearnerblog.herokuapp.com</a>는 여기서 확인할 수 있다.</p>

<p>헤로쿠를 결과적으로 이용하지 않는 가장 큰 이유는 헤로쿠의 서버였다. 서버가 미국에 있고 일정시간 신호가 없으면 서버가 다운되는데 이걸 복구할때 서버가 없다고 표시된다.</p>

<p>서버가 일정시간 반응이 없으면 절전모드처럼 서버가 다운되고 이를 다시 깨울려면 새로고침을 연타해야 된다는 것이다.</p>

<p>아무래도 무료 서비스이니 그럴 수있지만 느리기도 많이 느리고 나 이외의 사용자가 서버가 꺼진 상태에서 맞딱드릴 경우의 수와 무료 서비스는 서버가 일정사용량을 초과하면 이 역시도 한달간 서버가 다운된다는 점에서 결과적으로 github블로그를 개시하기로 하였다.</p>

<p>헤로쿠 사이트 개설과 flask를 통해 RESTFUL블로그를 만든 과정이 필요하다면 복습 차원에서 따로 다루기로 하겠다. 일단 내 깃허브에 해당 코드도 있고 헤로쿠를 이용할 시 생기는 여러가지 버그들을 해결하는 방법 또한 기록할 필요도 있기 때문이다.</p>]]></content><author><name>Code-Y-Learner</name></author><category term="blog" /><category term="blog" /><category term="flask" /><summary type="html"><![CDATA[블로그 개시]]></summary></entry></feed>